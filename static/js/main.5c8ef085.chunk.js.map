{"version":3,"sources":["components/common/MMHeading.js","components/Charts/ETLChartComponent.js","components/Charts/ETLCharts.js","components/common/MMButton.js","components/ETLStreamButtons.js","util/helperFunctions.js","util/streamNamesArray.js","util/services.js","components/ETLDashboard.js","components/HeaderArea/ETLHeaderArea.js","components/HeaderArea/ETLHead.js","components/Table/EnhancedTableToolbar.js","components/Table/ETLTableHead.js","components/Table/ETLTableComponent.js","components/Charts/ETLPieChart.js","hooks/useInterval.js","components/Table/ETLTable.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","header","marginBottom","textAlign","logo","height","padding","width","MMHeading","title","justifyValue","typographyVariant","gridDirectionValue","component","Grid","container","direction","justify","alignItems","Typography","variant","ETLChartComponent","chartData","parserType","chartText","chartRef","useRef","categoryChartDomRef","useEffect","current","data","labels","datasets","update","xyParser","xAxisKey","yAxisKey","Chart","type","elements","bar","borderWidth","label","backgroundColor","options","maintainAspectRatio","responsive","indexAxis","parsing","spanGaps","showLine","animations","scales","x","grid","display","ticks","autoSkip","y","plugins","text","position","font","size","weight","legend","renderChart","useMemo","ref","id","style","ETLCharts","topN","handleTopN","clientTotals","companyTotals","categoryTotals","webSocketOpen","renderCompanyChart","item","boxShadow","borderRadius","Card","CardContent","renderCategoryChart","renderClientChart","renderTopN","TextField","onChange","value","disabled","marginLeft","marginRight","paddingTop","spacing","xs","submitButton","textTransform","border","color","fontSize","MMButton","directionValue","gridStyle","alignItemsValue","buttonVariant","buttonType","onClickCb","disableButton","buttonText","loading","smValue","buttonStyle","classes","Fragment","Button","fullWidth","onClick","className","CircularProgress","ETLStreamButtons","isStartLoading","isStopLoading","isClearLoading","handleOnStart","handleOnStop","handleClearTables","margin","updatedArray","newMessage","bankClientsTotals","keys","_bankClientsTotals","_","isEmpty","push","sort","totalA","totalB","total_amount","slicedArray","uniqBy","newArr","length","slice","updatedBankClientsTotals","streamNamesArray","streamTableNamesArray","client","jsc8","url","apiKey","executeRestqlQuery","restQlName","a","bindVars","executeRestql","resp","result","console","error","clearTablesData","element","collection","truncate","startStopStream","start","activateStreamApp","log","establishConnection","streamName","stream","getOtp","consumerOTP","_consumer","consumer","otp","on","streamNameConnectionName","ETLDashboard","useState","categoriesTotal","setCategoriesTotal","clientsTotal","setClientsTotal","companyTotal","setCompaniesTotal","streamConnections","setStreamConnections","setIsClearLoading","setIsStartLoading","setIsStopLoading","setTopN","setWebSocketOpen","then","clearTables","useCallback","closeWebSocket","terminate","messageManipulation","msg","newData","encodedMessage","JSON","parse","payload","messageId","decodedMessage","atob","parseMessage","hasOwnProperty","startWebSocket","cur","cloneDeep","i","send","stringify","prev","event","num","target","replace","Number","handleClearAllTables","renderCharts","titleStyle","fontWeight","wordSpacing","content","subtitle","lineHeight","ETLHeaderArea","ETLHead","right","top","window","open","useToolbarStyles","theme","root","paddingLeft","paddingRight","maxHeight","formControl","minWidth","highlight","palette","secondary","main","lighten","light","primary","dark","flex","EnhancedTableToolbar","bankClientNames","selectedClient","isLoading","handleSelectClient","Toolbar","clsx","getOptionLabel","option","getOptionValue","placeholder","justifyContent","EnhancedTableHead","tableType","headCells","numeric","disablePadding","TableHead","TableRow","map","headCell","TableCell","align","borderTopWidth","paper","table","visuallyHidden","clip","overflow","EnhancedTable","tableData","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","emptyRows","Math","min","renderActualTable","Paper","TableContainer","minHeight","Table","aria-labelledby","aria-label","TableBody","row","index","labelId","hover","role","tabIndex","scope","client_name","date","date_start","txn_id","date_end","product_category_name","amount","_key","colSpan","alignContent","TablePagination","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","marginTop","ETLPieChart","hoverOffset","useInterval","callback","delay","savedCallback","setInterval","clearInterval","ETLTable","setTableData","setSelectedClient","setBankClients","anonymousBankClientNames","setAnonymousBankClientNames","setTableType","totals","setTotals","setIsLoading","getBankClients","results","offsetValue","b","localeCompare","getPieChartData","getTableData","clientName","handleTableType","name","renderTableButtons","renderTable","sum","createMuiTheme","overrides","MuiFormControl","MuiInputBase","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c8ef085.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, makeStyles, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  header: {\n    marginBottom: \"2rem\",\n    textAlign: \"center\",\n  },\n  logo: {\n    height: \"28px\",\n    padding: \"1rem 0 2.5rem\",\n    width: \"auto\",\n  },\n}));\n\nexport const MMHeading = ({\n  title,\n  justifyValue = \"center\",\n  typographyVariant = \"h3\",\n  gridDirectionValue = \"row\",\n  component = \"h1\",\n}) => {\n  const classes = useStyles();\n  return (\n    <Grid\n      container\n      direction={gridDirectionValue}\n      justify={justifyValue}\n      alignItems={\"flex-start\"}\n    >\n      <Typography variant={typographyVariant} component={component}>\n        {title}\n      </Typography>\n    </Grid>\n  );\n};\n","import React, { useMemo, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nconst ETLChartComponent = ({ chartData, parserType = \"\", chartText }) => {\n  const chartRef = useRef(null);\n  const categoryChartDomRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.data.labels = [];\n      chartRef.current.data.datasets[0].data = chartData;\n      chartRef.current.update();\n    }\n  }, [chartRef, chartData]);\n\n  useEffect(() => {\n    if (!chartRef.current && categoryChartDomRef.current) {\n      let xyParser = {\n        xAxisKey: \"total_amount\",\n        yAxisKey: \"client_name\",\n      };\n\n      if (parserType === \"companyTotals\") {\n        xyParser.yAxisKey = \"product_company\";\n      }\n\n      if (parserType === \"categoryTotals\") {\n        xyParser.yAxisKey = \"product_category_name\";\n      }\n      chartRef.current = new Chart(categoryChartDomRef.current, {\n        type: \"bar\",\n        elements: {\n          bar: {\n            borderWidth: 2,\n          },\n        },\n        data: {\n          datasets: [\n            {\n              label: \"Totals\",\n              data: chartData,\n              backgroundColor: [\"#338AD0\"],\n              borderWidth: 1,\n            },\n          ],\n        },\n        options: {\n          maintainAspectRatio: true,\n          responsive: true,\n          indexAxis: \"y\",\n          parsing: xyParser,\n          spanGaps: true,\n          showLine: false,\n          animations: true,\n          scales: {\n            x: {\n              grid: {\n                display: false,\n              },\n              ticks: {\n                autoSkip: false,\n              },\n              // min: 10000,\n              // max: 600000,\n            },\n            y: {\n              grid: {\n                display: false,\n              },\n              ticks: {\n                autoSkip: false,\n              },\n            },\n          },\n          plugins: {\n            title: {\n              text: chartText,\n              position: \"bottom\",\n              display: true,\n              font: {\n                size: 16,\n                weight: \"bold\",\n              },\n            },\n            legend: {\n              display: false,\n            },\n          },\n          // disable for all datasets\n        },\n      });\n    }\n  }, [chartData, parserType, chartText]);\n\n  const renderChart = useMemo(() => {\n    return <canvas ref={categoryChartDomRef} />;\n  }, []);\n\n  return (\n    <div id=\"chart\" style={{ height: \"auto\", width: \"auto\" }}>\n      {renderChart}\n    </div>\n  );\n};\n\nexport default ETLChartComponent;\n","import React, { useMemo } from \"react\";\nimport { Grid, TextField, Card, CardContent } from \"@material-ui/core\";\nimport { MMHeading } from \"../common/MMHeading\";\nimport ETLChartComponent from \"./ETLChartComponent\";\n\nexport const ETLCharts = ({\n  topN,\n  handleTopN,\n  clientTotals,\n  companyTotals,\n  categoryTotals,\n  webSocketOpen,\n}) => {\n  const renderCompanyChart = useMemo(() => {\n    return (\n      <Grid\n        item\n        // sm={4}\n        style={{\n          boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n          borderRadius: \"0.375rem\",\n        }}\n      >\n        <Card>\n          <CardContent>\n            <ETLChartComponent\n              chartData={companyTotals}\n              parserType=\"companyTotals\"\n              chartText=\"Company Totals\"\n            />\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  }, [companyTotals]);\n  const renderCategoryChart = useMemo(() => {\n    return (\n      <Grid\n        item\n        // sm={4}\n        style={{\n          boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n          borderRadius: \"0.375rem\",\n        }}\n      >\n        <Card>\n          <CardContent>\n            <ETLChartComponent\n              chartData={categoryTotals}\n              parserType=\"categoryTotals\"\n              chartText=\"Category Totals\"\n            />\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  }, [categoryTotals]);\n\n  const renderClientChart = useMemo(() => {\n    return (\n      <Grid\n        item\n        // sm={4}\n        style={{\n          boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n          borderRadius: \"0.375rem\",\n        }}\n      >\n        <Card>\n          <CardContent>\n            <ETLChartComponent\n              chartData={clientTotals}\n              parserType=\"clientTotals\"\n              chartText=\"Client Totals\"\n            />\n          </CardContent>\n        </Card>\n      </Grid>\n    );\n  }, [clientTotals]);\n\n  const renderTopN = useMemo(() => {\n    return (\n      <>\n        <Grid item>\n          <MMHeading\n            title=\"TopN\"\n            justifyValue=\"center\"\n            typographyVariant=\"h6\"\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"TopN\"\n            variant=\"outlined\"\n            size=\"small\"\n            onChange={handleTopN}\n            value={topN}\n            disabled={webSocketOpen}\n          />\n        </Grid>\n      </>\n    );\n  }, [topN, webSocketOpen, handleTopN]);\n\n  return (\n    <div\n      style={{\n        marginLeft: \"3vw\",\n        marginRight: \"3vw\",\n      }}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        style={{ paddingTop: \"30px\" }}\n      >\n        {renderTopN}\n      </Grid>\n      <Grid container spacing={5} style={{}}>\n        <Grid item xs>\n          {renderClientChart}\n        </Grid>\n        <Grid item xs>\n          {renderCompanyChart}\n        </Grid>\n        <Grid item xs>\n          {renderCategoryChart}\n        </Grid>\n      </Grid>\n      {/* <Grid item>\n          //bublechart\n          <ETLChartComponent\n            category={companyCategories}\n            categoryTotals={companyTotals}\n          />\n        </Grid> */}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button, makeStyles, CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  submitButton: {\n    // radius:\"50%\",\n    // backgroundColor: \"#338ad0\",\n    // color: \"#ffffff\",\n    // borderRadius: \"7%\",\n    textTransform: \"capitalize\",\n    border: \"1px solid #0000006b\",\n    backgroundColor: \"rgba(211,225,240,1)\",\n    color: \"black\",\n    marginRight: \"20px\",\n    padding: \"10px 0px\",\n    fontSize: \"18px\",\n    // // \"&:hover\": {\n    // //   backgroundColor: \"#1971b3\",\n    // //   \"&:disabled\": {\n    // //     backgroundColor: \"#85c1f5\",\n    // //     boxShadow: \"none\",\n    // //     color: \"#def0ff\",\n    // //   },\n    // },\n    // \"&:disabled\": {\n    //   backgroundColor: \"#85c1f5\",\n    //   boxShadow: \"none\",\n    //   color: \"#def0ff\",\n    // },\n  },\n}));\n\nexport const MMButton = ({\n  directionValue = \"row\",\n  gridStyle,\n  justifyValue = \"center\",\n  alignItemsValue = \"center\",\n  buttonVariant = \"contained\",\n  buttonType = \"submit\",\n  onClickCb,\n  disableButton,\n  buttonText,\n  loading,\n  smValue = 6,\n  buttonStyle = {},\n  id,\n}) => {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      {/* <Grid\n        container\n        item\n        style={gridStyle}\n        justify={justifyValue}\n        alignItems={alignItemsValue}\n        sm={smValue}\n      > */}\n      <Button\n        id={id}\n        variant={buttonVariant}\n        type={buttonType}\n        fullWidth\n        onClick={onClickCb}\n        className={classes.submitButton}\n        color=\"default\"\n        disabled={disableButton}\n        style={buttonStyle}\n      >\n        {loading ? <CircularProgress size={30} /> : buttonText}\n      </Button>\n      {/* </Grid> */}\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { MMButton } from \"./common/MMButton\";\nexport const ETLStreamButtons = ({\n  isStartLoading,\n  isStopLoading,\n  isClearLoading,\n  handleOnStart,\n  handleOnStop,\n  handleClearTables,\n}) => {\n  return (\n    <Grid container spacing={5} style={{ width: \"30%\", margin: \"auto\" }}>\n      <Grid item xs>\n        <MMButton\n          buttonText=\"Start\"\n          buttonType=\"primary\"\n          smValue={12}\n          id={\"start\"}\n          disableButton={isStartLoading || isStopLoading || isClearLoading}\n          loading={isStartLoading}\n          onClickCb={handleOnStart}\n          buttonStyle={{ marginRight: \"20px\" }}\n        />\n      </Grid>\n      <Grid item xs>\n        <MMButton\n          buttonText=\"Stop\"\n          buttonType=\"primary\"\n          id={\"stop\"}\n          smValue={12}\n          disableButton={isStartLoading || isStopLoading || isClearLoading}\n          loading={isStopLoading}\n          onClickCb={handleOnStop}\n          buttonStyle={{ marginRight: \"20px\" }}\n        />\n      </Grid>\n      <Grid item xs>\n        <MMButton\n          buttonText=\"Clear Tables\"\n          buttonType=\"primary\"\n          smValue={12}\n          id={\"clear-tables\"}\n          disableButton={isStartLoading || isStopLoading || isClearLoading}\n          loading={isClearLoading}\n          onClickCb={handleClearTables}\n          buttonStyle={{ marginRight: \"20px\" }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n","import _ from \"lodash\";\nexport const parseMessage = (msg) => {\n  const encodedMessage = JSON.parse(msg).payload;\n  const messageId = JSON.parse(msg).messageId;\n  const decodedMessage = atob(encodedMessage);\n  if (decodedMessage.length === 0) {\n    return { newData: {}, messageId };\n  }\n  const newData = JSON.parse(decodedMessage);\n  return { newData, messageId };\n};\n\nexport const updatedArray = (newMessage, bankClientsTotals, keys, topN) => {\n  let _bankClientsTotals = bankClientsTotals;\n  if (!_.isEmpty(newMessage)) {\n    _bankClientsTotals.push(newMessage);\n  }\n\n  _bankClientsTotals.sort(\n    (totalA, totalB) => totalB.total_amount - totalA.total_amount\n  );\n  let slicedArray = _.uniqBy(_bankClientsTotals, keys);\n  let newArr = [];\n  if (slicedArray.length > topN) {\n    newArr = slicedArray.slice(0, topN);\n  }\n\n  return {\n    updatedBankClientsTotals: newArr,\n  };\n};\n","export const streamNamesArray = [\n  \"etl-bank-totals\",\n  \"etl-bank-txns\",\n  \"etl-bank-txn-publisher\",\n  \"etl-bank-subscriptions\",\n  \"etl-bank-subscriptions-publisher\",\n];\nexport const streamTableNamesArray = [\n  \"etl_bank_category_totals\",\n  \"etl_bank_client_totals\",\n  \"etl_bank_company_totals\",\n  \"etl_bank_subscriptions\",\n  \"etl_bank_transactions\",\n];\n","import jsc8 from \"jsc8\";\nimport { streamTableNamesArray, streamNamesArray } from \"./streamNamesArray\";\n\nconst client = new jsc8({\n  url: \"https://gdn.paas.macrometa.io\",\n  apiKey:\n    \"stream-etl_macrometa.io.stream_etl_api_key.IxdAQ3xclGbaNut6Ey5S5lsyFr2SYvuI3BpjyvUiko2CQgcrQ68LWRCuGndSdEObb52fb0\",\n});\n\nexport const executeRestqlQuery = async (restQlName, bindVars = {}) => {\n  try {\n    const resp = await client.executeRestql(restQlName, bindVars);\n    return resp.result;\n  } catch (error) {\n    console.error(\"error\", error);\n  }\n};\nexport const clearTablesData = async () => {\n  for (const element of streamTableNamesArray) {\n    await client.collection(element).truncate();\n  }\n};\n\nexport const startStopStream = async (start) => {\n  for (const element of streamNamesArray) {\n    try {\n      await client.activateStreamApp(element, start);\n    } catch (error) {\n      console.log(\"error 502\", error);\n      throw error;\n    }\n  }\n};\n\nexport const establishConnection = async (streamName) => {\n  try {\n    const stream = client.stream(streamName, false);\n    const consumerOTP = await stream.getOtp();\n    const _consumer = stream.consumer(\"anurag\", \"gdn.paas.macrometa.io\", {\n      otp: consumerOTP,\n    });\n    _consumer.on(\"open\", () => {\n      console.log(`Connection open for _clientConsumer `);\n    });\n    _consumer.on(\"close\", () => {\n      console.log(`Connection close for _clientConsumer `);\n    });\n    return _consumer;\n  } catch (error) {\n    console.error(\"error\", error);\n  }\n};\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\n\nimport { ETLCharts } from \"./Charts/ETLCharts\";\nimport { ETLStreamButtons } from \"./ETLStreamButtons\";\nimport _ from \"lodash\";\n// import {\n//   streamNamesArray,\n//   streamTableNamesArray,\n// } from \"../util/streamNamesArray\";\nimport { parseMessage, updatedArray } from \"../util/helperFunctions\";\nimport {\n  executeRestqlQuery,\n  startStopStream,\n  establishConnection,\n  clearTablesData,\n} from \"../util/services\";\n\nconst streamNameConnectionName = [\n  \"EtlBankClientNameTotalStream\",\n  \"EtlBankCompanyNameTotalStream\",\n  \"EtlBankCategoryNameTotalStream\",\n];\n\nconst ETLDashboard = () => {\n  const [categoriesTotal, setCategoriesTotal] = useState([]);\n  const [clientsTotal, setClientsTotal] = useState([]);\n  const [companyTotal, setCompaniesTotal] = useState([]);\n  const [streamConnections, setStreamConnections] = useState([]);\n  const [isClearLoading, setIsClearLoading] = useState(false);\n  const [isStartLoading, setIsStartLoading] = useState(false);\n  const [isStopLoading, setIsStopLoading] = useState(false);\n  const [topN, setTopN] = useState(10);\n  const [webSocketOpen, setWebSocketOpen] = useState(false);\n\n  useEffect(() => {\n    executeRestqlQuery(\"getBankClientTotals\", {\n      topN: topN,\n    }).then((result) => {\n      setClientsTotal(() => [...result]);\n    });\n  }, [topN]);\n\n  useEffect(() => {\n    executeRestqlQuery(\"getBankCompanyTotals\", {\n      topN: topN,\n    }).then((result) => {\n      setCompaniesTotal(() => [...result]);\n    });\n  }, [topN]);\n\n  useEffect(() => {\n    executeRestqlQuery(\"getBankCategoryTotals\", {\n      topN: topN,\n    }).then(async (result) => {\n      setCategoriesTotal(() => [...result]);\n    });\n  }, [topN]);\n\n  const clearTables = useCallback(async () => {\n    await clearTablesData();\n    setIsClearLoading(false);\n    setClientsTotal(() => []);\n    setCategoriesTotal(() => []);\n    setCompaniesTotal(() => []);\n  }, []);\n  const closeWebSocket = useCallback(async () => {\n    for (const elements of streamConnections) {\n      await elements.terminate();\n    }\n    try {\n      await startStopStream(false);\n    } catch (error) {\n      console.error(\"error\", error);\n      setIsStopLoading(false);\n    }\n    setIsStopLoading(false);\n    setWebSocketOpen(false);\n  }, [streamConnections]);\n\n  const messageManipulation = (msg) => {\n    const { newData } = parseMessage(msg);\n    if (newData.hasOwnProperty(\"client_name\")) {\n      const { updatedBankClientsTotals } = updatedArray(\n        newData,\n        clientsTotal,\n        \"client_name\",\n        topN\n      );\n\n      setClientsTotal(() => [...updatedBankClientsTotals]);\n    } else if (newData.hasOwnProperty(\"product_company\")) {\n      const { updatedBankClientsTotals } = updatedArray(\n        newData,\n        companyTotal,\n        \"product_company\",\n        topN\n      );\n\n      setCompaniesTotal(() => [...updatedBankClientsTotals]);\n    } else if (newData.hasOwnProperty(\"product_category_name\")) {\n      const { updatedBankClientsTotals } = updatedArray(\n        newData,\n        categoriesTotal,\n        \"product_category_name\",\n        topN\n      );\n\n      setCategoriesTotal(() => [...updatedBankClientsTotals]);\n    }\n  };\n\n  const startWebSocket = async () => {\n    try {\n      setWebSocketOpen(true);\n      await startStopStream(true);\n      let cur = _.cloneDeep(streamConnections);\n      for (let i = 0; i < 3; i++) {\n        cur[i] = await establishConnection(streamNameConnectionName[i]);\n        cur[i].on(\"message\", (msg) => {\n          cur[i].send(JSON.stringify({ messageId: JSON.parse(msg).messageId }));\n\n          messageManipulation(msg);\n        });\n      }\n      setStreamConnections((prev) => {\n        return [...streamConnections, ...cur];\n      });\n    } catch (error) {\n      console.error(\"error\", error);\n      setIsStopLoading(false);\n    }\n\n    setIsStartLoading(false);\n  };\n\n  const handleTopN = useCallback((event) => {\n    const num = event.target.value.replace(/[^0-9]/g, \"\");\n\n    setClientsTotal([]);\n    setCategoriesTotal([]);\n    setCompaniesTotal([]);\n    setTopN(Number(num));\n  }, []);\n\n  const handleClearAllTables = useCallback(() => {\n    setIsClearLoading(true);\n    clearTables();\n  }, [clearTables]);\n\n  const handleOnStart = () => {\n    setIsStartLoading(true);\n    startWebSocket();\n  };\n\n  const handleOnStop = () => {\n    setIsStopLoading(true);\n    closeWebSocket();\n  };\n\n  const renderCharts = useMemo(() => {\n    return (\n      <ETLCharts\n        handleTopN={handleTopN}\n        topN={topN}\n        clientTotals={clientsTotal}\n        companyTotals={companyTotal}\n        categoryTotals={categoriesTotal}\n        webSocketOpen={webSocketOpen}\n      />\n    );\n  }, [\n    handleTopN,\n    topN,\n    clientsTotal,\n    webSocketOpen,\n    companyTotal,\n    categoriesTotal,\n  ]);\n\n  return (\n    <React.Fragment>\n      <ETLStreamButtons\n        handleOnStart={handleOnStart}\n        handleOnStop={handleOnStop}\n        handleClearTables={handleClearAllTables}\n        isStartLoading={isStartLoading}\n        isStopLoading={isStopLoading}\n        isClearLoading={isClearLoading}\n      />\n      {renderCharts}\n    </React.Fragment>\n  );\n};\n\nexport default ETLDashboard;\n","import React from \"react\";\nimport { Grid, Typography, makeStyles } from \"@material-ui/core\";\nimport { MMHeading } from \"../common/MMHeading\";\nimport { MMButton } from \"../common/MMButton\";\n\nconst useStyles = makeStyles(() => ({\n  titleStyle: {\n    fontWeight: \"700\",\n    wordSpacing: \"0.5\",\n  },\n  content: {\n    textAlign: \"center\",\n    padding: \"20px\",\n  },\n  subtitle: {\n    // maxWeight: \"30%\",\n    width: \"30%\",\n    margin: \"auto\",\n    lineHeight: \"1.2\",\n  },\n}));\n\nexport const ETLHeaderArea = () => {\n  const classes = useStyles();\n  return (\n    <Grid className={classes.content}>\n      <Typography variant=\"h4\" className={classes.titleStyle}>\n        Macrometa Streaming ETL\n      </Typography>\n    <Typography variant=\"h6\" className={classes.subtitle}>\n        Real time ETL with Stream Workers & Query Workers for synthetic bank\n        data\n      </Typography>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport { MMButton } from \"../common/MMButton\";\nimport { ETLHeaderArea } from \"./ETLHeaderArea\";\n\nconst ETLHead = () => {\n  return (\n    <React.Fragment>\n      <div style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }}>\n        <MMButton\n          buttonText=\"About\"\n          id={\"about\"}\n          onClickCb={() => {\n            window.open(\n              \"https://github.com/Macrometacorp/demo-realtime-etl/blob/main/README.md\",\n              \"_blank\"\n            );\n          }}\n        />\n      </div>\n      <ETLHeaderArea />\n    </React.Fragment>\n  );\n};\n\nexport default ETLHead;\n","import React from \"react\";\nimport { Grid, Toolbar, makeStyles, lighten } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport Select from \"react-select\";\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    maxHeight: \"80px\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: \"1 1 100%\",\n  },\n}));\n\nexport const EnhancedTableToolbar = ({\n  bankClientNames,\n  isLoading,\n  selectedClient,\n  handleSelectClient,\n}) => {\n  const classes = useToolbarStyles();\n  return (\n    <Toolbar\n      className={clsx(classes.root)}\n      style={{\n        backgroundColor: \"rgba(51,138,208,0.6)\",\n      }}\n    >\n      <Grid container>\n        <Grid item xs>\n          <Select\n            options={bankClientNames}\n            value={selectedClient}\n            onChange={handleSelectClient}\n            getOptionLabel={(option) => option.label}\n            getOptionValue={(option) => option.id}\n            placeholder={selectedClient ? selectedClient : \"Client Name\"}\n          />\n        </Grid>\n        <Grid\n          item\n          xs={10}\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            textAlign: \"center\",\n          }}\n        >\n          <span\n            style={{\n              fontWeight: \"700\",\n              fontSize: \"30px\",\n              marginLeft: \"-180px\",\n            }}\n          >\n            Client Data\n          </span>\n        </Grid>\n      </Grid>\n    </Toolbar>\n  );\n};\n","import React from \"react\";\nimport { TableCell, TableHead, TableRow } from \"@material-ui/core\";\n\nexport const EnhancedTableHead = ({ tableType }) => {\n  const headCells = [\n    {\n      id: \"client_name\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Client Name\",\n    },\n    {\n      id: tableType !== \"Subscriptions\" ? \"date\" : \"date_start\",\n      numeric: true,\n      disablePadding: false,\n      label: tableType !== \"Subscriptions\" ? \"Date\" : \"Start Date\",\n    },\n    {\n      id: tableType !== \"Subscriptions\" ? \"txn_id\" : \"date_end\",\n      numeric: true,\n      disablePadding: true,\n      label: tableType !== \"Subscriptions\" ? \"Transaction Id\" : \"End Date\",\n    },\n\n    {\n      id: \"product_category_name\",\n      numeric: true,\n      disablePadding: true,\n      label: \"Product Category Name\",\n    },\n    { id: \"amount\", numeric: true, disablePadding: false, label: \"Amount\" },\n  ];\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={\"center\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            style={{ fontSize: \"18px\", fontWeight: \"700\" }}\n          >\n            {headCell.label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n","import React, { useMemo, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  CircularProgress,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { EnhancedTableToolbar } from \"./EnhancedTableToolbar\";\nimport { EnhancedTableHead } from \"./ETLTableHead\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n    borderRadius: \"0.375rem\",\n    borderTopWidth: 1,\n    \"& .MuiTableCell-root\": {\n      border: \" 1px solid rgba(224, 224, 224, 1)\",\n    },\n  },\n\n  paper: {\n    width: \"100%\",\n\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({\n  bankClientNames,\n  selectedClient,\n  handleSelectClient,\n  tableData,\n  tableType,\n  isLoading,\n}) {\n  const classes = useStyles();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows =\n    tableData &&\n    tableData.length &&\n    rowsPerPage - Math.min(rowsPerPage, tableData.length - page * rowsPerPage);\n\n  const renderActualTable = useMemo(() => {\n    return (\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar\n          tableType={tableType}\n          bankClientNames={bankClientNames}\n          selectedClient={selectedClient}\n          handleSelectClient={handleSelectClient}\n          isLoading={isLoading}\n        />\n\n        <TableContainer style={{ minHeight: \"280px\" }}>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={\"medium\"}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead tableType={tableType} />\n            <TableBody>\n              {tableData && tableData.length ? (\n                tableData\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => {\n                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row._key}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          id={labelId}\n                          scope=\"row\"\n                          padding=\"none\"\n                          align=\"center\"\n                        >\n                          {row.client_name}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {tableType !== \"Subscriptions\"\n                            ? row.date\n                            : row.date_start}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {tableType !== \"Subscriptions\"\n                            ? row.txn_id\n                            : row.date_end}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {row.product_category_name}\n                        </TableCell>\n                        <TableCell align=\"center\">{row.amount}</TableCell>\n                      </TableRow>\n                    );\n                  })\n              ) : isLoading ? (\n                <TableRow>\n                  <TableCell align=\"center\" colSpan={6}>\n                    <CircularProgress size={30} />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                <TableRow>\n                  <TableCell align=\"center\" colSpan={6}>\n                    <div\n                      style={{\n                        justifyContent: \"center\",\n                        alignContent: \"center\",\n                      }}\n                    >\n                      <Typography\n                        className={clsx(classes.content)}\n                        variant=\"h4\"\n                        align=\"center\"\n                      >\n                        No Data\n                      </Typography>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              )}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10]}\n          component=\"div\"\n          count={tableData && tableData.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    );\n  }, [\n    emptyRows,\n    bankClientNames,\n    isLoading,\n    classes,\n    handleSelectClient,\n    page,\n    rowsPerPage,\n    selectedClient,\n    tableData,\n    tableType,\n  ]);\n  return (\n    <div className={classes.root} style={{ marginTop: \"2vh\" }}>\n      {renderActualTable}\n    </div>\n  );\n}\n","import React, { useMemo, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nconst ETLPieChart = ({ chartData }) => {\n  const chartRef = useRef(null);\n  const categoryChartDomRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.data.datasets[0].data = chartData;\n      chartRef.current.update();\n    }\n  }, [chartRef, chartData]);\n\n  useEffect(() => {\n    if (!chartRef.current && categoryChartDomRef.current) {\n      chartRef.current = new Chart(categoryChartDomRef.current, {\n        type: \"pie\",\n\n        data: {\n          labels: [\"Company\", \"Category\", \"Client\"],\n          datasets: [\n            {\n              label: \"Totals\",\n              data: chartData,\n              backgroundColor: [\n                \"rgb(255, 99, 132)\",\n                \"rgb(54, 162, 235)\",\n                \"rgb(255, 205, 86)\",\n              ],\n              hoverOffset: 4,\n            },\n          ],\n        },\n        options: {\n          plugins: {\n            title: {\n              text: \"Totals\",\n              display: true,\n              position: \"bottom\",\n              font: {\n                size: 16,\n                weight: \"bold\",\n              },\n            },\n            legend: {\n              position: \"bottom\",\n            },\n          },\n        },\n      });\n    }\n  }, [chartData]);\n\n  const renderChart = useMemo(() => {\n    return <canvas ref={categoryChartDomRef} />;\n  }, []);\n\n  return <div id=\"chart\">{renderChart}</div>;\n};\n\nexport default ETLPieChart;\n","import { useEffect, useRef } from \"react\";\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    };\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React, { useMemo, useState, useCallback, useEffect } from \"react\";\nimport { Grid, CardContent, Card, Typography } from \"@material-ui/core\";\nimport { MMButton } from \"../common/MMButton\";\nimport EnhancedTable from \"./ETLTableComponent\";\nimport ETLPieChart from \"../Charts/ETLPieChart\";\nimport { executeRestqlQuery } from \"../../util/services\";\nimport _ from \"lodash\";\nimport useInterval from \"../../hooks/useInterval\";\n\nexport const ETLTable = () => {\n  const [tableData, setTableData] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(\"\");\n  const [bankClientNames, setBankClients] = useState([]);\n  const [anonymousBankClientNames, setAnonymousBankClientNames] = useState([]);\n  const [tableType, setTableType] = useState(\"Transactions\");\n  const [totals, setTotals] = useState([0, 0, 0]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getBankClients = useCallback(async () => {\n    let bankClientNames = [],\n      anonymousBankClientNames = [];\n\n    for (let i = 1; i <= 10; i++) {\n      let result = [],\n        results = [];\n      result = await executeRestqlQuery(\"getBankClients\", {\n        offsetValue: i * 100,\n      });\n      results = await executeRestqlQuery(\"getBankAnonymizationClient\", {\n        offsetValue: i * 100,\n      });\n      bankClientNames = [...bankClientNames, ...result];\n      anonymousBankClientNames = [...anonymousBankClientNames, ...results];\n    }\n    bankClientNames.sort((a, b) => a.id.localeCompare(b.id));\n    anonymousBankClientNames.sort((a, b) => a.id.localeCompare(b.id));\n\n    setBankClients(() => [...bankClientNames]);\n    setAnonymousBankClientNames(() => [...anonymousBankClientNames]);\n  }, []);\n\n  const getPieChartData = useCallback(async () => {\n    const result = await executeRestqlQuery(\"getTotals\");\n    setTotals(() => [...result]);\n  }, []);\n\n  useEffect(() => {\n    getBankClients();\n  }, [getBankClients]);\n\n  useEffect(() => {\n    getPieChartData();\n  }, [getPieChartData]);\n\n  useInterval(getPieChartData, 30000);\n\n  const getTableData = useCallback(async () => {\n    let result = [];\n    switch (tableType) {\n      case \"Transactions\":\n        result = await executeRestqlQuery(\"getBanksTxnsByClient\", {\n          clientName: selectedClient,\n        });\n        break;\n      case \"Subscriptions\":\n        result = await executeRestqlQuery(\"getBankSubscriptionsByClient\", {\n          clientName: selectedClient,\n        });\n        break;\n      case \"Anonymous\":\n        result = await executeRestqlQuery(\"getBankTxnsByAnnonymousClient\", {\n          clientName: selectedClient,\n        });\n        break;\n      default:\n        result = await executeRestqlQuery(\"getBanksTxnsByClient\", {\n          clientName: selectedClient,\n        });\n        break;\n    }\n    setTableData(() => [...result]);\n    setIsLoading(false);\n  }, [tableType, selectedClient]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTableData();\n  }, [tableType, getTableData, selectedClient]);\n\n  const handleTableType = useCallback((name) => {\n    setTableType(name);\n  }, []);\n\n  const handleSelectClient = useCallback((event) => {\n    setSelectedClient(event.id);\n  }, []);\n\n  const renderTableButtons = useMemo(() => {\n    return (\n      <Grid container spacing={2} style={{ width: \"40%\" }}>\n        <Grid item xs>\n          <MMButton\n            buttonText=\"Transactions\"\n            buttonType=\"primary\"\n            smValue={12}\n            id={\"Transactions\"}\n            // disableButton={isStartLoading || isStopLoading}\n            // loading={isStartLoading}\n            onClickCb={() => handleTableType(\"Transactions\")}\n            buttonStyle={{\n              backgroundColor:\n                tableType === \"Transactions\"\n                  ? \"#338AD0\"\n                  : \"rgba(211,225,240,1)\",\n            }}\n          />\n        </Grid>\n        <Grid item xs>\n          <MMButton\n            buttonText=\"Subscriptions\"\n            buttonType=\"primary\"\n            smValue={12}\n            id={\"Subscriptions\"}\n            // disableButton={isStartLoading || isStopLoading}\n            // loading={isStartLoading}\n            onClickCb={() => handleTableType(\"Subscriptions\")}\n            buttonStyle={{\n              backgroundColor:\n                tableType === \"Subscriptions\"\n                  ? \"#338AD0\"\n                  : \"rgba(211,225,240,1)\",\n            }}\n          />\n        </Grid>\n        <Grid item xs>\n          <MMButton\n            buttonText=\"Anonymous\"\n            buttonType=\"primary\"\n            smValue={12}\n            id={\"Anonymous\"}\n            // disableButton={isStartLoading || isStopLoading}\n            // loading={isStartLoading}\n            onClickCb={() => handleTableType(\"Anonymous\")}\n            buttonStyle={{\n              backgroundColor:\n                tableType === \"Anonymous\" ? \"#338AD0\" : \"rgba(211,225,240,1)\",\n            }}\n          />\n        </Grid>\n      </Grid>\n    );\n  }, [handleTableType, tableType]);\n\n  const renderTable = useMemo(() => {\n    return (\n      <EnhancedTable\n        bankClientNames={\n          tableType === \"Anonymous\" ? anonymousBankClientNames : bankClientNames\n        }\n        selectedClient={selectedClient}\n        handleSelectClient={handleSelectClient}\n        tableData={tableData}\n        tableType={tableType}\n        isLoading={isLoading}\n      />\n    );\n  }, [\n    bankClientNames,\n    anonymousBankClientNames,\n    tableData,\n    tableType,\n    isLoading,\n    selectedClient,\n    handleSelectClient,\n  ]);\n  return (\n    <Grid container spacing={3} style={{ padding: \"3vw\" }}>\n      <Grid item xs={9}>\n        {renderTableButtons}\n        {renderTable}\n      </Grid>\n\n      <Grid item xs={3} style={{ paddingTop: \"60px\" }}>\n        <Card>\n          <CardContent>\n            {_.sum(totals) !== 0 ? (\n              <ETLPieChart chartData={totals} />\n            ) : (\n              <Typography variant=\"h6\" align=\"center\">\n                No Data to show pie chart\n              </Typography>\n            )}\n          </CardContent>\n        </Card>\n      </Grid>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport ETLDashboard from \"./components/ETLDashboard\";\nimport ETLHead from \"./components/HeaderArea/ETLHead\";\nimport { ETLTable } from \"./components/Table/ETLTable\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nconst theme = createMuiTheme({\n  overrides: {\n    MuiFormControl: {\n      root: {\n        height: \"56px\",\n      },\n    },\n    MuiInputBase: {\n      root: {\n        height: \"30px\",\n        width: \"60px\",\n      },\n    },\n  },\n});\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ETLHead />\n      <ETLDashboard />\n      <ETLTable />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}