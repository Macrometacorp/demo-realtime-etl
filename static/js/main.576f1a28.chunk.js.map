{"version":3,"sources":["components/common/MMHeading.js","components/Charts/ETLChartComponent.js","components/Charts/ETLCharts.js","components/common/MMButton.js","components/ETLStreamButtons.js","util/helperFunctions.js","util/streamNamesArray.js","util/services.js","components/ETLDashboard.js","components/HeaderArea/ETLHeaderArea.js","components/HeaderArea/ETLHead.js","components/Table/EnhancedTableToolbar.js","components/Table/ETLTableHead.js","components/Table/ETLTableComponent.js","components/Charts/ETLPieChart.js","hooks/useInterval.js","components/Table/ETLTable.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","header","marginBottom","textAlign","logo","height","padding","width","MMHeading","title","justifyValue","typographyVariant","gridDirectionValue","component","Grid","container","direction","justify","alignItems","Typography","variant","ETLChartComponent","chartData","parserType","chartText","chartRef","useRef","categoryChartDomRef","useEffect","current","data","labels","datasets","update","xyParser","xAxisKey","yAxisKey","setAttribute","Chart","type","elements","bar","label","backgroundColor","options","maintainAspectRatio","responsive","indexAxis","parsing","animations","scales","x","grid","display","ticks","autoSkip","y","plugins","text","position","font","size","weight","legend","renderChart","useMemo","ref","id","ETLCharts","topN","handleTopN","clientTotals","companyTotals","categoryTotals","renderCompanyChart","item","renderCategoryChart","renderClientChart","renderTopN","style","marginRight","TextField","onChange","value","marginLeft","paddingTop","spacing","xs","submitButton","textTransform","fontFamily","fontWeight","color","fontSize","MMButton","directionValue","gridStyle","alignItemsValue","buttonVariant","buttonType","onClickCb","disableButton","buttonText","loading","smValue","buttonStyle","classes","Fragment","Button","fullWidth","onClick","className","disabled","CircularProgress","theme","gridContainer","margin","breakpoints","up","flexWrap","ETLStreamButtons","isStartLoading","isStopLoading","isClearLoading","handleOnStart","handleOnStop","handleClearTables","updatedArray","newMessage","bankClientsTotals","keys","_bankClientsTotals","_","isEmpty","push","sort","totalA","totalB","total_amount","slicedArray","uniqBy","newArr","length","slice","updatedBankClientsTotals","streamNamesArray","streamTableNamesArray","client","jsc8","url","apiKey","executeRestqlQuery","restQlName","a","bindVars","executeRestql","resp","result","console","error","clearTablesData","Promise","all","map","element","collection","truncate","log","startStopStream","start","activateStreamApp","establishConnection","streamName","stream","getOtp","consumerOTP","_consumer","consumer","otp","on","getBankClientNames","queryName","i","offsetValue","bankClientsResponse","bankClientNames","reduce","_bankClientNames","bankClients","b","localeCompare","streamNameConnectionName","ETLDashboard","useState","categoriesTotal","setCategoriesTotal","clientsTotal","setClientsTotal","companyTotal","setCompaniesTotal","streamConnections","setStreamConnections","setIsClearLoading","setIsStartLoading","setIsStopLoading","setTopN","setTopNContext","then","clearTables","useCallback","closeWebSocket","terminate","messageManipulation","msg","newData","encodedMessage","JSON","parse","payload","messageId","decodedMessage","atob","parseMessage","hasOwnProperty","startWebSocket","cur","cloneDeep","send","stringify","prev","event","num","target","replace","Number","handleClearAllTables","renderCharts","titleStyle","wordSpacing","content","subtitle","lineHeight","ETLHeaderArea","ETLHead","right","top","window","open","useToolbarStyles","root","paddingLeft","paddingRight","maxHeight","formControl","minWidth","highlight","palette","secondary","main","lighten","light","primary","dark","flex","EnhancedTableToolbar","selectedClient","isLoading","handleSelectClient","colourStyles","control","styles","option","isDisabled","isFocused","isSelected","placeholder","defaultStyles","Toolbar","clsx","getOptionLabel","getOptionValue","justifyContent","marginTop","EnhancedTableHead","tableType","headCells","numeric","disablePadding","TableHead","TableRow","headCell","TableCell","align","border","paper","visuallyHidden","clip","overflow","EnhancedTable","tableData","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","emptyRows","Math","min","renderActualTable","Paper","TableContainer","Table","aria-labelledby","aria-label","TableBody","row","index","labelId","hover","role","tabIndex","scope","client_name","date","date_start","txn_id","date_end","product_category_name","amount","_key","colSpan","alignContent","TablePagination","rowsPerPageOptions","count","onChangePage","onChangeRowsPerPage","ETLPieChart","hoverOffset","useInterval","callback","delay","savedCallback","setInterval","clearInterval","ETLTable","setTableData","setSelectedClient","setBankClients","anonymousBankClientNames","setAnonymousBankClientNames","setTableType","totals","setTotals","setIsLoading","getAnonymousBankClientName","_anonymousBankClientNames","sliceArray","getPieChartData","getBankClients","getTableData","clientName","handleTableType","name","renderTableButtons","renderTable","sum","createMuiTheme","overrides","MuiFormControl","MuiInputBase","typography","join","MuiTypography","h6","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.576f1a28.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, makeStyles, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  header: {\n    marginBottom: \"2rem\",\n    textAlign: \"center\",\n  },\n  logo: {\n    height: \"28px\",\n    padding: \"1rem 0 2.5rem\",\n    width: \"auto\",\n  },\n}));\n\nexport const MMHeading = ({\n  title,\n  justifyValue = \"center\",\n  typographyVariant = \"h3\",\n  gridDirectionValue = \"row\",\n  component = \"h1\",\n}) => {\n  const classes = useStyles();\n  return (\n    <Grid\n      container\n      direction={gridDirectionValue}\n      justify={justifyValue}\n      alignItems={\"flex-start\"}\n    >\n      <Typography variant={typographyVariant} component={component}>\n        {title}\n      </Typography>\n    </Grid>\n  );\n};\n","import React, { useMemo, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nconst ETLChartComponent = ({ chartData, parserType = \"\", chartText }) => {\n  const chartRef = useRef(null);\n  const categoryChartDomRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.data.labels = [];\n      chartRef.current.data.datasets[0].data = chartData;\n      chartRef.current.update();\n    }\n  }, [chartRef, chartData]);\n\n  useEffect(() => {\n    if (!chartRef.current && categoryChartDomRef.current) {\n      let xyParser = {\n        xAxisKey: \"total_amount\",\n        yAxisKey: \"client_name\",\n      };\n\n      if (parserType === \"companyTotals\") {\n        xyParser.yAxisKey = \"product_company\";\n      }\n\n      if (parserType === \"categoryTotals\") {\n        xyParser.yAxisKey = \"product_category_name\";\n      }\n      categoryChartDomRef.current.setAttribute(\"height\", \"200%\");\n      chartRef.current = new Chart(categoryChartDomRef.current, {\n        type: \"bar\",\n        elements: {\n          bar: {\n            // borderWidth: 10,\n          },\n        },\n        data: {\n          datasets: [\n            {\n              label: \"Totals\",\n              data: chartData,\n              backgroundColor: [\"#338AD0\"],\n            },\n          ],\n        },\n        options: {\n          maintainAspectRatio: true,\n          responsive: true,\n          indexAxis: \"y\",\n          parsing: xyParser,\n          animations: true,\n          scales: {\n            x: {\n              grid: {\n                display: false,\n              },\n              ticks: {\n                autoSkip: false,\n              },\n            },\n            y: {\n              grid: {\n                display: false,\n              },\n              ticks: {\n                autoSkip: false,\n              },\n            },\n          },\n          plugins: {\n            title: {\n              text: chartText,\n              position: \"bottom\",\n              display: true,\n              font: {\n                size: 16,\n                weight: \"bold\",\n              },\n            },\n            legend: {\n              display: false,\n            },\n          },\n          // disable for all datasets\n        },\n      });\n    }\n  }, [chartData, parserType, chartText]);\n\n  const renderChart = useMemo(() => {\n    return <canvas ref={categoryChartDomRef} />;\n  }, []);\n\n  return <div id=\"chart\">{renderChart}</div>;\n};\n\nexport default ETLChartComponent;\n","import React, { useMemo } from \"react\";\nimport { Grid, TextField, Card, CardContent } from \"@material-ui/core\";\nimport { MMHeading } from \"../common/MMHeading\";\nimport ETLChartComponent from \"./ETLChartComponent\";\n\nexport const ETLCharts = ({\n  topN,\n  handleTopN,\n  clientTotals,\n  companyTotals,\n  categoryTotals,\n  // webSocketOpen,\n}) => {\n  const renderCompanyChart = useMemo(() => {\n    return (\n      <Grid\n        item\n        // sm={4}\n        // style={{\n        //   boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n        //   borderRadius: \"0.375rem\",\n        // }}\n      >\n        <ETLChartComponent\n          chartData={companyTotals}\n          parserType=\"companyTotals\"\n          chartText=\"Merchant Totals($)\"\n        />\n      </Grid>\n    );\n  }, [companyTotals]);\n  const renderCategoryChart = useMemo(() => {\n    return (\n      <Grid\n        item\n        // sm={4}\n        // style={{\n        //   boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n        //   borderRadius: \"0.375rem\",\n        // }}\n      >\n        <ETLChartComponent\n          chartData={categoryTotals}\n          parserType=\"categoryTotals\"\n          chartText=\"Category Totals($)\"\n        />\n      </Grid>\n    );\n  }, [categoryTotals]);\n\n  const renderClientChart = useMemo(() => {\n    return (\n      <Grid\n        item\n        // sm={4}\n        // style={{\n        //   boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n        //   borderRadius: \"0.375rem\",\n        // }}\n      >\n        <ETLChartComponent\n          chartData={clientTotals}\n          parserType=\"clientTotals\"\n          chartText=\"Purchaser Totals($)\"\n        />\n      </Grid>\n    );\n  }, [clientTotals]);\n\n  const renderTopN = useMemo(() => {\n    return (\n      <>\n        <Grid item style={{ marginRight: \"10px\" }}>\n          <MMHeading\n            title=\"TopN\"\n            justifyValue=\"center\"\n            typographyVariant=\"h6\"\n          />\n        </Grid>\n        <Grid item>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"TopN\"\n            variant=\"outlined\"\n            size=\"small\"\n            onChange={handleTopN}\n            value={topN}\n            //  disabled={webSocketOpen}\n          />\n        </Grid>\n      </>\n    );\n  }, [topN, handleTopN]);\n\n  return (\n    <div\n      style={{\n        marginLeft: \"3vw\",\n        marginRight: \"3vw\",\n      }}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        style={{ paddingTop: \"30px\" }}\n      >\n        {renderTopN}\n      </Grid>\n      <Grid container spacing={5}>\n        <Grid item xs={4}>\n          {renderClientChart}\n        </Grid>\n        <Grid item xs={4}>\n          {renderCompanyChart}\n        </Grid>\n        <Grid item xs={4}>\n          {renderCategoryChart}\n        </Grid>\n      </Grid>\n      {/* <Grid item>\n          //bublechart\n          <ETLChartComponent\n            category={companyCategories}\n            categoryTotals={companyTotals}\n          />\n        </Grid> */}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button, makeStyles, CircularProgress } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() => ({\n  submitButton: {\n    // radius:\"50%\",\n    // backgroundColor: \"#338ad0\",\n    // color: \"#ffffff\",\n    // borderRadius: \"7%\",\n    textTransform: \"capitalize\",\n    // border: \"1px solid #0000006b\",\n    backgroundColor: \"rgba(211,225,240,1)\",\n\n    marginRight: \"20px\",\n    width: \"100%\",\n    // padding: \"10px 0px\",\n    fontFamily: \"Lato\",\n    fontWeight: \"900\",\n    color: \"rgba(0,0,0,1)\",\n    fontSize: \"16px\",\n\n    // // \"&:hover\": {\n    // //   backgroundColor: \"#1971b3\",\n    // //   \"&:disabled\": {\n    // //     backgroundColor: \"#85c1f5\",\n    // //     boxShadow: \"none\",\n    // //     color: \"#def0ff\",\n    // //   },\n    // },\n    // \"&:disabled\": {\n    //   backgroundColor: \"#85c1f5\",\n    //   boxShadow: \"none\",\n    //   color: \"#def0ff\",\n    // },\n  },\n}));\n\nexport const MMButton = ({\n  directionValue = \"row\",\n  gridStyle,\n  justifyValue = \"center\",\n  alignItemsValue = \"center\",\n  buttonVariant = \"contained\",\n  buttonType = \"submit\",\n  onClickCb,\n  disableButton,\n  buttonText,\n  loading,\n  smValue = 6,\n  buttonStyle = {},\n  id,\n}) => {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      {/* <Grid\n        container\n        item\n        style={gridStyle}\n        justify={justifyValue}\n        alignItems={alignItemsValue}\n        sm={smValue}\n      > */}\n      <Button\n        id={id}\n        variant={buttonVariant}\n        type={buttonType}\n        fullWidth\n        onClick={onClickCb}\n        className={classes.submitButton}\n        color=\"default\"\n        disabled={disableButton}\n        style={buttonStyle}\n      >\n        {loading ? <CircularProgress size={30} /> : buttonText}\n      </Button>\n      {/* </Grid> */}\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\nimport { MMButton } from \"./common/MMButton\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    width: \"20%\",\n    margin: \"auto\",\n\n    [theme.breakpoints.up(\"lg\")]: {\n      flexWrap: \"nowrap\",\n      width: \"25%\",\n      margin: \"auto\",\n    },\n    // [theme.breakpoints.down(\"xl\")]: { flexWrap: \"nowrap\" },\n    // [theme.breakpoints.down(\"xl\")]: { width: \"40%\" },\n    // // [theme.breakpoints.down(\"xl\")]: { width: \"30%\" },\n    // [theme.breakpoints.down(\"md\")]: {},\n    // [theme.breakpoints.down(\"sm\")]: {},\n    // [theme.breakpoints.down(\"xs\")]: {},\n  },\n}));\n\nexport const ETLStreamButtons = ({\n  isStartLoading,\n  isStopLoading,\n  isClearLoading,\n  handleOnStart,\n  handleOnStop,\n  handleClearTables,\n}) => {\n  const classes = useStyles();\n  return (\n    <Grid container spacing={3} className={classes.gridContainer}>\n      <Grid item xs>\n        <MMButton\n          buttonText=\"Start\"\n          buttonType=\"primary\"\n          smValue={12}\n          id={\"start\"}\n          disableButton={isStartLoading || isStopLoading || isClearLoading}\n          loading={isStartLoading}\n          onClickCb={handleOnStart}\n          buttonStyle={{ marginRight: \"20px\" }}\n        />\n      </Grid>\n      <Grid item xs>\n        <MMButton\n          buttonText=\"Stop\"\n          buttonType=\"primary\"\n          id={\"stop\"}\n          smValue={12}\n          disableButton={isStartLoading || isStopLoading || isClearLoading}\n          loading={isStopLoading}\n          onClickCb={handleOnStop}\n          buttonStyle={{ marginRight: \"20px\" }}\n        />\n      </Grid>\n      <Grid item xs>\n        <MMButton\n          buttonText=\"Clear\"\n          buttonType=\"primary\"\n          smValue={12}\n          id={\"clear-tables\"}\n          disableButton={isStartLoading || isStopLoading || isClearLoading}\n          loading={isClearLoading}\n          onClickCb={handleClearTables}\n          buttonStyle={{ marginRight: \"20px\" }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n","import _ from \"lodash\";\nexport const parseMessage = (msg) => {\n  const encodedMessage = JSON.parse(msg).payload;\n  const messageId = JSON.parse(msg).messageId;\n  const decodedMessage = atob(encodedMessage);\n  if (decodedMessage.length === 0) {\n    return { newData: {}, messageId };\n  }\n  const newData = JSON.parse(decodedMessage);\n  return { newData, messageId };\n};\n\nexport const updatedArray = (newMessage, bankClientsTotals, keys, topN) => {\n  let _bankClientsTotals = bankClientsTotals;\n  if (!_.isEmpty(newMessage)) {\n    _bankClientsTotals.push(newMessage);\n  }\n\n  _bankClientsTotals.sort(\n    (totalA, totalB) => totalB.total_amount - totalA.total_amount\n  );\n  let slicedArray = _.uniqBy(_bankClientsTotals, keys);\n  let newArr = [];\n  if (slicedArray.length > topN) {\n    newArr = slicedArray.slice(0, topN);\n  }\n\n  return {\n    updatedBankClientsTotals: newArr,\n  };\n};\n","export const streamNamesArray = [\n  \"etl-bank-totals\",\n  \"etl-bank-txns\",\n  \"etl-bank-txn-publisher\",\n  \"etl-bank-subscriptions\",\n  \"etl-bank-subscriptions-publisher\",\n];\nexport const streamTableNamesArray = [\n  \"etl_bank_category_totals\",\n  \"etl_bank_client_totals\",\n  \"etl_bank_company_totals\",\n  \"etl_bank_subscriptions\",\n  \"etl_bank_transactions\",\n  \"etl_bank_transactions_anonymization\",\n];\n","import jsc8 from \"jsc8\";\nimport { streamTableNamesArray, streamNamesArray } from \"./streamNamesArray\";\n\nconst client = new jsc8({\n  url: \"https://gdn.paas.macrometa.io\",\n  apiKey:\n    \"demo-stream-etl_macrometa.io.demo_stream_etl_key.llikKuDJWjRrV5uMuxpUAHDgmlAy34aqCa2TK54vkLtaoqfHQtejLxQVKeJy51dh9fd8c2\",\n});\n\nexport const executeRestqlQuery = async (restQlName, bindVars = {}) => {\n  try {\n    const resp = await client.executeRestql(restQlName, bindVars);\n    return resp.result;\n  } catch (error) {\n    console.error(\"error\", error);\n    return [];\n    // throw error;\n  }\n};\nexport const clearTablesData = async () => {\n  try {\n    await Promise.all(\n      streamTableNamesArray.map(async (element) => {\n        await client.collection(element).truncate();\n      })\n    );\n  } catch (error) {\n    console.log(\"the error is\", error);\n  }\n};\n\nexport const startStopStream = async (start) => {\n  for (const element of streamNamesArray) {\n    try {\n      await client.activateStreamApp(element, start);\n    } catch (error) {\n      console.log(\"error 502\", error);\n      throw error;\n    }\n  }\n};\n\nexport const establishConnection = async (streamName) => {\n  try {\n    const stream = client.stream(streamName, false);\n    const consumerOTP = await stream.getOtp();\n    const _consumer = stream.consumer(\n      \"anurag-streams\",\n      \"gdn.paas.macrometa.io\",\n      {\n        otp: consumerOTP,\n      }\n    );\n    _consumer.on(\"open\", () => {\n      console.log(`Connection open for _clientConsumer `);\n    });\n    _consumer.on(\"close\", () => {\n      console.log(`Connection close for _clientConsumer `);\n    });\n    return _consumer;\n  } catch (error) {\n    console.error(\"error\", error);\n  }\n};\n\nexport const getBankClientNames = async (queryName) => {\n  let result = [];\n  for (let i = 0; i < 10; i++) {\n    result[i] = executeRestqlQuery(queryName, {\n      offsetValue: i * 100,\n    });\n  }\n\n  const bankClientsResponse = await Promise.all(result);\n  const bankClientNames = bankClientsResponse.reduce(\n    (_bankClientNames, bankClients) => {\n      _bankClientNames.push(...bankClients);\n      return _bankClientNames;\n    },\n    []\n  );\n\n  bankClientNames.sort((a, b) => a.id.localeCompare(b.id));\n  return bankClientNames;\n};\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n  useRef,\n} from \"react\";\n\nimport { ETLCharts } from \"./Charts/ETLCharts\";\nimport { ETLStreamButtons } from \"./ETLStreamButtons\";\nimport _ from \"lodash\";\nimport { parseMessage, updatedArray } from \"../util/helperFunctions\";\nimport {\n  executeRestqlQuery,\n  startStopStream,\n  establishConnection,\n  clearTablesData,\n} from \"../util/services\";\n\nconst streamNameConnectionName = [\n  \"EtlBankClientNameTotalStream\",\n  \"EtlBankCompanyNameTotalStream\",\n  \"EtlBankCategoryNameTotalStream\",\n];\n\nconst ETLDashboard = () => {\n  const [categoriesTotal, setCategoriesTotal] = useState([]);\n  const [clientsTotal, setClientsTotal] = useState([]);\n  const [companyTotal, setCompaniesTotal] = useState([]);\n  const [streamConnections, setStreamConnections] = useState([]);\n  const [isClearLoading, setIsClearLoading] = useState(false);\n  const [isStartLoading, setIsStartLoading] = useState(false);\n  const [isStopLoading, setIsStopLoading] = useState(false);\n  const [topN, setTopN] = useState(7);\n  const setTopNContext = useRef(null);\n  // const [webSocketOpen, setWebSocketOpen] = useState(false);\n\n  useEffect(() => {\n    executeRestqlQuery(\"getBankClientTotals\", {\n      topN: topN,\n    }).then((result) => {\n      setClientsTotal(() => [...result]);\n    });\n  }, [topN]);\n\n  useEffect(() => {\n    executeRestqlQuery(\"getBankCompanyTotals\", {\n      topN: topN,\n    }).then((result) => {\n      setCompaniesTotal(() => [...result]);\n    });\n  }, [topN]);\n\n  useEffect(() => {\n    executeRestqlQuery(\"getBankCategoryTotals\", {\n      topN: topN,\n    }).then(async (result) => {\n      setCategoriesTotal(() => [...result]);\n    });\n  }, [topN]);\n\n  useEffect(() => {\n    setTopNContext.current = topN;\n  }, [topN]);\n\n  const clearTables = useCallback(async () => {\n    await closeWebSocket();\n    await clearTablesData();\n    setIsClearLoading(false);\n    setClientsTotal(() => []);\n    setCategoriesTotal(() => []);\n    setCompaniesTotal(() => []);\n  }, []);\n  const closeWebSocket = useCallback(async () => {\n    for (const elements of streamConnections) {\n      await elements.terminate();\n    }\n    try {\n      await startStopStream(false);\n      setIsStopLoading(false);\n    } catch (error) {\n      console.error(\"error\", error);\n      setIsStopLoading(false);\n    }\n    // setWebSocketOpen(false);\n  }, [streamConnections]);\n\n  const messageManipulation = (msg) => {\n    const { newData } = parseMessage(msg);\n    if (newData.hasOwnProperty(\"client_name\")) {\n      const { updatedBankClientsTotals } = updatedArray(\n        newData,\n        clientsTotal,\n        \"client_name\",\n        setTopNContext.current\n      );\n\n      setClientsTotal(() => [...updatedBankClientsTotals]);\n    } else if (newData.hasOwnProperty(\"product_company\")) {\n      const { updatedBankClientsTotals } = updatedArray(\n        newData,\n        companyTotal,\n        \"product_company\",\n        setTopNContext.current\n      );\n\n      setCompaniesTotal(() => [...updatedBankClientsTotals]);\n    } else if (newData.hasOwnProperty(\"product_category_name\")) {\n      const { updatedBankClientsTotals } = updatedArray(\n        newData,\n        categoriesTotal,\n        \"product_category_name\",\n        setTopNContext.current\n      );\n\n      setCategoriesTotal(() => [...updatedBankClientsTotals]);\n    }\n  };\n\n  const startWebSocket = async () => {\n    try {\n      // setWebSocketOpen(true);\n      await startStopStream(true);\n      let cur = _.cloneDeep(streamConnections);\n      for (let i = 0; i < 3; i++) {\n        cur[i] = await establishConnection(streamNameConnectionName[i]);\n        cur[i].on(\"message\", (msg) => {\n          cur[i].send(JSON.stringify({ messageId: JSON.parse(msg).messageId }));\n\n          messageManipulation(msg);\n        });\n      }\n      setStreamConnections((prev) => {\n        return [...streamConnections, ...cur];\n      });\n      setIsStartLoading(false);\n    } catch (error) {\n      console.error(\"error\", error);\n      setIsStopLoading(false);\n    }\n  };\n\n  const handleTopN = useCallback((event) => {\n    const num = event.target.value.replace(/[^0-9]/g, \"\");\n\n    setClientsTotal([]);\n    setCategoriesTotal([]);\n    setCompaniesTotal([]);\n    setTopN(Number(num));\n  }, []);\n\n  const handleClearAllTables = useCallback(() => {\n    setIsClearLoading(true);\n    clearTables();\n  }, [clearTables]);\n\n  const handleOnStart = () => {\n    setIsStartLoading(true);\n    startWebSocket();\n  };\n\n  const handleOnStop = () => {\n    setIsStopLoading(true);\n    closeWebSocket();\n  };\n\n  const renderCharts = useMemo(() => {\n    return (\n      <ETLCharts\n        handleTopN={handleTopN}\n        topN={topN}\n        clientTotals={clientsTotal}\n        companyTotals={companyTotal}\n        categoryTotals={categoriesTotal}\n        // webSocketOpen={webSocketOpen}\n      />\n    );\n  }, [\n    handleTopN,\n    topN,\n    clientsTotal,\n    // webSocketOpen,\n    companyTotal,\n    categoriesTotal,\n  ]);\n\n  return (\n    <React.Fragment>\n      <ETLStreamButtons\n        handleOnStart={handleOnStart}\n        handleOnStop={handleOnStop}\n        handleClearTables={handleClearAllTables}\n        isStartLoading={isStartLoading}\n        isStopLoading={isStopLoading}\n        isClearLoading={isClearLoading}\n      />\n      {renderCharts}\n    </React.Fragment>\n  );\n};\n\nexport default ETLDashboard;\n","import React from \"react\";\nimport { Grid, Typography, makeStyles } from \"@material-ui/core\";\nimport { MMHeading } from \"../common/MMHeading\";\nimport { MMButton } from \"../common/MMButton\";\n\nconst useStyles = makeStyles(() => ({\n  titleStyle: {\n    fontWeight: \"700\",\n    wordSpacing: \"0.5\",\n    color: \"black\",\n  },\n  content: {\n    textAlign: \"center\",\n    padding: \"20px\",\n  },\n  subtitle: {\n    // maxWeight: \"30%\",\n    width: \"30%\",\n    margin: \"auto\",\n    lineHeight: \"1.2\",\n  },\n}));\n\nexport const ETLHeaderArea = () => {\n  const classes = useStyles();\n  return (\n    <Grid className={classes.content}>\n      <Typography variant=\"h4\" className={classes.titleStyle}>\n        Macrometa Streaming ETL\n      </Typography>\n      <Typography variant=\"h6\" className={classes.subtitle}>\n        Real time ETL with Stream Workers & Query Workers for synthetic bank\n        data\n      </Typography>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport { MMButton } from \"../common/MMButton\";\nimport { ETLHeaderArea } from \"./ETLHeaderArea\";\n\nconst ETLHead = () => {\n  return (\n    <React.Fragment>\n      <div style={{ position: \"absolute\", right: \"10px\", top: \"10px\" }}>\n        <MMButton\n          buttonText=\"About\"\n          id={\"about\"}\n          onClickCb={() => {\n            window.open(\n              \"https://github.com/Macrometacorp/demo-realtime-etl/blob/main/README.md\",\n              \"_blank\"\n            );\n          }}\n        />\n      </div>\n      <ETLHeaderArea />\n    </React.Fragment>\n  );\n};\n\nexport default ETLHead;\n","import React from \"react\";\nimport { Grid, Toolbar, makeStyles, lighten } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport Select from \"react-select\";\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n    maxHeight: \"80px\",\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  highlight:\n    theme.palette.type === \"light\"\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: \"1 1 100%\",\n  },\n}));\n\nexport const EnhancedTableToolbar = ({\n  bankClientNames,\n  isLoading,\n  selectedClient,\n  handleSelectClient,\n}) => {\n  const classes = useToolbarStyles();\n  const colourStyles = {\n    control: (styles) => ({ ...styles, backgroundColor: \"white\" }),\n    option: (styles, { data, isDisabled, isFocused, isSelected }) => {\n      // const color = chroma(data.color);\n      return {\n        ...styles,\n        // backgroundColor:\"white\",\n        color: \"rgba(105,105,105,0.6)\",\n        fontFamily: \"Lato\",\n        fontWeight: \"600\",\n        // cursor: isDisabled ? \"not-allowed\" : \"default\",\n      };\n    },\n    placeholder: (defaultStyles) => {\n      const color = \"rgba(105,105,105,0.8)\";\n      const fontFamily = \"Lato\";\n      const fontWeight = \"700\";\n\n      return { ...defaultStyles, color, fontFamily, fontWeight };\n    },\n  };\n\n  return (\n    <Toolbar\n      className={clsx(classes.root)}\n      style={{\n        backgroundColor: \"rgba(51,138,208,0.6)\",\n      }}\n    >\n      <Grid container>\n        <Grid item xs>\n          <Select\n            options={bankClientNames}\n            styles={colourStyles}\n            value={selectedClient}\n            onChange={handleSelectClient}\n            getOptionLabel={(option) => option.label}\n            getOptionValue={(option) => option.id}\n            placeholder={selectedClient ? selectedClient : \"Client Name\"}\n          />\n        </Grid>\n        <Grid\n          item\n          xs={10}\n          style={{\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            textAlign: \"center\",\n          }}\n        >\n          <span\n            style={{\n              fontWeight: \"500\",\n              fontSize: \"24px\",\n              fontFamily: \"Lato\",\n              color: \"rgba(0,0,0,0.8)\",\n              marginTop: \"24px\",\n              marginLeft: \"-180px\",\n            }}\n          >\n            Client Data\n          </span>\n        </Grid>\n      </Grid>\n    </Toolbar>\n  );\n};\n","import React from \"react\";\nimport { TableCell, TableHead, TableRow } from \"@material-ui/core\";\n\nexport const EnhancedTableHead = ({ tableType }) => {\n  const headCells = [\n    {\n      id: \"client_name\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Client Name\",\n    },\n    {\n      id: tableType !== \"Subscriptions\" ? \"date\" : \"date_start\",\n      numeric: true,\n      disablePadding: false,\n      label: tableType !== \"Subscriptions\" ? \"Date\" : \"Start Date\",\n    },\n    {\n      id: tableType !== \"Subscriptions\" ? \"txn_id\" : \"date_end\",\n      numeric: true,\n      disablePadding: true,\n      label: tableType !== \"Subscriptions\" ? \"Transaction Id\" : \"End Date\",\n    },\n\n    {\n      id: \"product_category_name\",\n      numeric: true,\n      disablePadding: true,\n      label: \"Product Category Name\",\n    },\n    { id: \"amount\", numeric: true, disablePadding: false, label: \"Amount\" },\n  ];\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={\"center\"}\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\n            style={{\n              fontSize: \"16px\",\n              fontWeight: \"900\",\n              fontFamily: \"Lato\",\n              color: \"rgb(105,105,105)\",\n            }}\n          >\n            {headCell.label}\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n};\n","import React, { useMemo, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TablePagination,\n  TableRow,\n  CircularProgress,\n  Paper,\n} from \"@material-ui/core\";\n\nimport { EnhancedTableToolbar } from \"./EnhancedTableToolbar\";\nimport { EnhancedTableHead } from \"./ETLTableHead\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    // boxShadow: \"2px 5px 5px 2px #d4d4d4\",\n    // borderRadius: \"0.375rem\",\n    // borderTopWidth: 1,\n    \"& .MuiTableCell-root\": {\n      border: \" 1px solid rgba(224, 224, 224, 1)\",\n    },\n  },\n\n  paper: {\n    width: \"100%\",\n\n    marginBottom: theme.spacing(2),\n  },\n  // table: {\n  //   minWidth: 750,\n  // },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({\n  bankClientNames,\n  selectedClient,\n  handleSelectClient,\n  tableData,\n  tableType,\n  isLoading,\n}) {\n  const classes = useStyles();\n\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const emptyRows =\n    tableData &&\n    tableData.length &&\n    rowsPerPage - Math.min(rowsPerPage, tableData.length - page * rowsPerPage);\n\n  const renderActualTable = useMemo(() => {\n    return (\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar\n          tableType={tableType}\n          bankClientNames={bankClientNames}\n          selectedClient={selectedClient}\n          handleSelectClient={handleSelectClient}\n          isLoading={isLoading}\n        />\n\n        <TableContainer>\n          <Table\n            // className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={\"medium\"}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead tableType={tableType} />\n            <TableBody>\n              {tableData && tableData.length ? (\n                tableData\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => {\n                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row._key}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          id={labelId}\n                          scope=\"row\"\n                          padding=\"none\"\n                          align=\"center\"\n                        >\n                          {row.client_name}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {tableType !== \"Subscriptions\"\n                            ? row.date\n                            : row.date_start}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {tableType !== \"Subscriptions\"\n                            ? row.txn_id\n                            : row.date_end}\n                        </TableCell>\n                        <TableCell align=\"center\">\n                          {row.product_category_name}\n                        </TableCell>\n                        <TableCell align=\"center\">{row.amount}</TableCell>\n                      </TableRow>\n                    );\n                  })\n              ) : isLoading ? (\n                <TableRow>\n                  <TableCell align=\"center\" colSpan={6}>\n                    <CircularProgress size={30} />\n                  </TableCell>\n                </TableRow>\n              ) : (\n                <TableRow>\n                  <TableCell align=\"center\" colSpan={6}>\n                    <div\n                      style={{\n                        justifyContent: \"center\",\n                        alignContent: \"center\",\n                      }}\n                    >\n                      <Typography\n                        variant=\"h6\"\n                        align=\"center\"\n                        style={{ color: \"rgb(105, 105, 105)\" }}\n                      >\n                        No Data\n                      </Typography>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              )}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5]}\n          component=\"div\"\n          count={tableData && tableData.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    );\n  }, [\n    emptyRows,\n    bankClientNames,\n    isLoading,\n    classes,\n    handleSelectClient,\n    page,\n    rowsPerPage,\n    selectedClient,\n    tableData,\n    tableType,\n  ]);\n  return (\n    <div className={classes.root} style={{ marginTop: \"2vh\" }}>\n      {renderActualTable}\n    </div>\n  );\n}\n","import React, { useMemo, useEffect, useRef } from \"react\";\nimport Chart from \"chart.js/auto\";\nconst ETLPieChart = ({ chartData }) => {\n  const chartRef = useRef(null);\n  const categoryChartDomRef = useRef(null);\n\n  useEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.data.datasets[0].data = chartData;\n      chartRef.current.update();\n    }\n  }, [chartRef, chartData]);\n\n  useEffect(() => {\n    if (!chartRef.current && categoryChartDomRef.current) {\n      chartRef.current = new Chart(categoryChartDomRef.current, {\n        type: \"pie\",\n\n        data: {\n          labels: [\n            \"Merchant Totals($)\",\n            \"Category Totals($)\",\n            \"Purchaser Totals($)\",\n          ],\n          datasets: [\n            {\n              label: \"Totals\",\n              data: chartData,\n              backgroundColor: [\n                \"rgb(255, 99, 132)\",\n                \"rgb(54, 162, 235)\",\n                \"rgb(255, 205, 86)\",\n              ],\n              hoverOffset: 4,\n            },\n          ],\n        },\n        options: {\n          plugins: {\n            title: {\n              text: \"Totals\",\n              display: true,\n              position: \"bottom\",\n              font: {\n                size: 16,\n                weight: \"bold\",\n              },\n            },\n            legend: {\n              position: \"bottom\",\n            },\n          },\n        },\n      });\n    }\n  }, [chartData]);\n\n  const renderChart = useMemo(() => {\n    return <canvas ref={categoryChartDomRef} />;\n  }, []);\n\n  return <div id=\"chart\">{renderChart}</div>;\n};\n\nexport default ETLPieChart;\n","import { useEffect, useRef } from \"react\";\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const tick = () => {\n      savedCallback.current();\n    };\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport default useInterval;\n","import React, { useMemo, useState, useCallback, useEffect } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { MMButton } from \"../common/MMButton\";\nimport EnhancedTable from \"./ETLTableComponent\";\nimport ETLPieChart from \"../Charts/ETLPieChart\";\nimport { executeRestqlQuery, getBankClientNames } from \"../../util/services\";\nimport _ from \"lodash\";\nimport useInterval from \"../../hooks/useInterval\";\n\nexport const ETLTable = () => {\n  const [tableData, setTableData] = useState([]);\n  const [selectedClient, setSelectedClient] = useState(\"\");\n  const [bankClientNames, setBankClients] = useState([]);\n  const [anonymousBankClientNames, setAnonymousBankClientNames] = useState([]);\n  const [tableType, setTableType] = useState(\"Transactions\");\n  const [totals, setTotals] = useState([0, 0, 0]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // const offsetValueRef = useRef(null);\n\n  const getAnonymousBankClientName = useCallback(async () => {\n    if (anonymousBankClientNames.length >= 500) {\n      return;\n    }\n\n    const _anonymousBankClientNames = await getBankClientNames(\n      \"getBankAnonymizationClient\"\n    );\n    const sliceArray = _.uniqBy(_anonymousBankClientNames, \"id\");\n    setAnonymousBankClientNames(() => [...sliceArray]);\n  }, [anonymousBankClientNames.length]);\n\n  const getPieChartData = useCallback(async () => {\n    const result = await executeRestqlQuery(\"getTotals\");\n    setTotals(() => [...result]);\n  }, []);\n\n  useEffect(() => {\n    const getBankClients = async () => {\n      const bankClientNames = await getBankClientNames(\"getBankClients\");\n      setBankClients(() => [...bankClientNames]);\n    };\n\n    getBankClients();\n  }, []);\n\n  useEffect(() => {\n    getAnonymousBankClientName();\n  }, [getAnonymousBankClientName]);\n\n  useEffect(() => {\n    getPieChartData();\n  }, [getPieChartData]);\n\n  useInterval(getAnonymousBankClientName, 5000);\n  useInterval(getPieChartData, 30000);\n\n  const getTableData = useCallback(async () => {\n    let result = [];\n    try {\n      switch (tableType) {\n        case \"Transactions\":\n          result = await executeRestqlQuery(\"getBanksTxnsByClient\", {\n            clientName: selectedClient,\n          });\n          break;\n        case \"Subscriptions\":\n          result = await executeRestqlQuery(\"getBankSubscriptionsByClient\", {\n            clientName: selectedClient,\n          });\n          break;\n        case \"Anonymous\":\n          result = await executeRestqlQuery(\"getBankTxnsByAnnonymousClient\", {\n            clientName: selectedClient,\n          });\n          break;\n        default:\n          result = await executeRestqlQuery(\"getBanksTxnsByClient\", {\n            clientName: selectedClient,\n          });\n          break;\n      }\n      setTableData(() => [...result]);\n      setIsLoading(false);\n    } catch (error) {\n      console.error(\"error\", error);\n      setIsLoading(false);\n    }\n  }, [tableType, selectedClient]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTableData();\n  }, [tableType, getTableData, selectedClient]);\n\n  const handleTableType = useCallback((name) => {\n    setTableType(name);\n  }, []);\n\n  const handleSelectClient = useCallback((event) => {\n    setSelectedClient(event.id);\n  }, []);\n\n  const renderTableButtons = useMemo(() => {\n    return (\n      <Grid\n        container\n        spacing={1}\n        style={{\n          width: \"40%\",\n          flexWrap: \"nowrap\",\n        }}\n      >\n        <Grid item xs>\n          <MMButton\n            buttonText=\"Transactions\"\n            buttonType=\"primary\"\n            smValue={12}\n            id={\"Transactions\"}\n            // disableButton={isStartLoading || isStopLoading}\n            // loading={isStartLoading}\n            onClickCb={() => handleTableType(\"Transactions\")}\n            buttonStyle={{\n              backgroundColor:\n                tableType === \"Transactions\"\n                  ? \"#338AD0\"\n                  : \"rgba(211,225,240,1)\",\n            }}\n          />\n        </Grid>\n        <Grid item xs>\n          <MMButton\n            buttonText=\"Subscriptions\"\n            buttonType=\"primary\"\n            smValue={12}\n            id={\"Subscriptions\"}\n            // disableButton={isStartLoading || isStopLoading}\n            // loading={isStartLoading}\n            onClickCb={() => handleTableType(\"Subscriptions\")}\n            buttonStyle={{\n              backgroundColor:\n                tableType === \"Subscriptions\"\n                  ? \"#338AD0\"\n                  : \"rgba(211,225,240,1)\",\n            }}\n          />\n        </Grid>\n        <Grid item xs>\n          <MMButton\n            buttonText=\"Anonymous\"\n            buttonType=\"primary\"\n            smValue={12}\n            id={\"Anonymous\"}\n            // disableButton={isStartLoading || isStopLoading}\n            // loading={isStartLoading}\n            onClickCb={() => handleTableType(\"Anonymous\")}\n            buttonStyle={{\n              backgroundColor:\n                tableType === \"Anonymous\" ? \"#338AD0\" : \"rgba(211,225,240,1)\",\n            }}\n          />\n        </Grid>\n      </Grid>\n    );\n  }, [handleTableType, tableType]);\n\n  const renderTable = useMemo(() => {\n    return (\n      <EnhancedTable\n        bankClientNames={\n          tableType === \"Anonymous\" ? anonymousBankClientNames : bankClientNames\n        }\n        selectedClient={selectedClient}\n        handleSelectClient={handleSelectClient}\n        tableData={tableData}\n        tableType={tableType}\n        isLoading={isLoading}\n      />\n    );\n  }, [\n    bankClientNames,\n    anonymousBankClientNames,\n    tableData,\n    tableType,\n    isLoading,\n    selectedClient,\n    handleSelectClient,\n  ]);\n  return (\n    <Grid container spacing={3} style={{ padding: \"3vw\" }}>\n      <Grid item xs={9}>\n        {renderTableButtons}\n        {renderTable}\n      </Grid>\n      <Grid item xs={3}>\n        {_.sum(totals) !== 0 ? (\n          <ETLPieChart chartData={totals} />\n        ) : (\n          <Typography variant=\"h6\" align=\"center\">\n            No Data to show for pie chart\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport ETLDashboard from \"./components/ETLDashboard\";\nimport ETLHead from \"./components/HeaderArea/ETLHead\";\nimport { ETLTable } from \"./components/Table/ETLTable\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nconst theme = createMuiTheme({\n  overrides: {\n    MuiFormControl: {\n      root: {\n        height: \"56px\",\n      },\n    },\n    MuiInputBase: {\n      root: {\n        height: \"30px\",\n        width: \"60px\",\n      },\n    },\n    typography: {\n      fontFamily: [\"Lato\", \"sans-serif\"].join(\",\"),\n    },\n    MuiTypography: {\n      h6: {\n        fontSize: \"16px\",\n      },\n    },\n  },\n});\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ETLHead />\n      <ETLDashboard />\n      <ETLTable />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}